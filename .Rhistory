top_10_default_states <- row.names(state_v_default[order(state_v_default$percentage,decreasing=T)[1:10],])
BorrState
mydata_pruned$badState <- mydata$BorrState in top_10_default_states
mydata_pruned$badState <- mydata$BorrState %in% top_10_default_states
year_v_default <- xtabs(~ ApprovalFiscalYear + defaulted, data = mydata)
year_v_default
year_v_default$percentage <- year_v_default[,2]/(year_v_default[,1]+year_v_default[,2])
year_v_default$percentage <- year_v_default[,2]/(year_v_default[,1]+year_v_default[,2])
year_v_default[,2]
year_v_default[,1]
year_v_default[,]
year_v_default[,0]
year_v_default <- xtabs(~ ApprovalFiscalYear + defaulted, data = mydata)
year_v_default$percentage <- year_v_default[,2]/(year_v_default[,1]+year_v_default[,2])
View(year_v_default)
year_v_default <- as.data.frame.matrix(year_v_default)
year_v_default <- xtabs(~ ApprovalFiscalYear + defaulted, data = mydata)
year_v_default <- xtabs(~ ApprovalFiscalYear + defaulted, data = mydata)
year_v_default
year_v_default <- as.data.frame.matrix(year_v_default)
year_v_default
year_v_default$percentage <- year_v_default[,2]/(year_v_default[,1]+year_v_default[,2])
year_v_default
high_default_years <- row.names(year_v_default[order(percentage, decreasing = TRUE)])
high_default_years <- row.names(year_v_default[order(year_v_default$percentage, decreasing = TRUE)])
top_10_default_years <- row.names(year_v_default[order(year_v_default$percentage,decreasing = T)[1:10],])
mydata_pruned$badYear <- mydata$ApprovalFiscalYear %in% top_10_default_years
b_type_table <- xtabs(~ BusinessType + defaulted, data = mydata)
b_type_table <- as.data.frame.matrix(b_type_table)
b_type_table
b_type_table$percentage <- b_type_table[,2]/(b_type_table[,1]+b_type_table[,2])
b_type_table
test_X = test_X_pruned[test_indices,]
train_X = mydata_pruned[-test_indices,]
mydata <- read.csv("SBA_Loan_data.csv")
mydata$defaulted <- mydata$GrossChargeOffAmount > 0
mydata <- subset(mydata, LoanStatus!="EXEMPT"&LoanStatus!="CANCLD")
state_v_default <- xtabs(~ BorrState + defaulted, data = mydata)
state_v_default[-1,]
state_v_default$percentage <- state_v_default[,2]/(state_v_default[,1]+state_v_default[,2])
state_v_default <- xtabs(~ BorrState + defaulted, data = mydata)
state_v_default <- as.data.frame.matrix(state_v_default)
state_v_default[-1,]
state_v_default$percentage <- state_v_default[,2]/(state_v_default[,1]+state_v_default[,2])
year_v_default <- xtabs(~ ApprovalFiscalYear + defaulted, data = mydata)
year_v_default <- as.data.frame.matrix(year_v_default)
year_v_default$percentage <- year_v_default[,2]/(year_v_default[,1]+year_v_default[,2])
set.seed(1000)
test_indices <- sample(147423,10000)
test_X <- mydata[test_indices,]
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc")
test_X_pruned <- test_X[,!(names(test_X) %in% drops)]
mydata_pruned <- mydata[,!(names(mydata) %in% drops)]
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned)
summary(lm.fit) # show results
top_10_default_states <- row.names(state_v_default[order(state_v_default$percentage,decreasing=T)[1:10],])
top_10_default_years <- row.names(year_v_default[order(year_v_default$percentage,decreasing = T)[1:10],])
mydata_pruned$badState <- mydata$BorrState %in% top_10_default_states
mydata_pruned$badYear <- mydata$ApprovalFiscalYear %in% top_10_default_years
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned)
summary(lm.fit) # show results
#Make indicator variables
top_10_default_states <- row.names(state_v_default[order(state_v_default$percentage,decreasing=T)[1:10],])
top_10_default_years <- row.names(year_v_default[order(year_v_default$percentage,decreasing = T)[1:10],])
mydata_pruned$badState <- mydata$BorrState %in% top_10_default_states
mydata_pruned$badYear <- mydata$ApprovalFiscalYear %in% top_10_default_years
set.seed(1000)
test_indices <- sample(147423,10000)
test_X <- mydata[test_indices,]
test_X_pruned <- test_X[,!(names(test_X) %in% drops)]
mydata_pruned <- mydata[,!(names(mydata) %in% drops)]
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned)
summary(lm.fit) # show results
top_10_default_states <- row.names(state_v_default[order(state_v_default$percentage,decreasing=T)[1:10],])
top_10_default_years <- row.names(year_v_default[order(year_v_default$percentage,decreasing = T)[1:10],])
mydata$badState <- mydata$BorrState %in% top_10_default_states
mydata$badYear <- mydata$ApprovalFiscalYear %in% top_10_default_years
#testing for linear and logistic?
set.seed(1000)
test_indices <- sample(147423,10000)
test_X <- mydata[test_indices,]
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc")
test_X_pruned <- test_X[,!(names(test_X) %in% drops)]
mydata_pruned <- mydata[,!(names(mydata) %in% drops)]
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned)
summary(lm.fit) # show results
test_X = test_X_pruned[test_indices,]
train_X = mydata_pruned[-test_indices,]
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned[,-c("defaulted")])
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned[,c(-"defaulted")])
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned[!defaulted])
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned[!test_X_pruned$defaulted])
myvars <- names(test_X_pruned) %in% c("defaulted")
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned[!myvars])
summary(lm.fit) # show results
test_X = test_X_pruned[test_indices,]
train_X = mydata_pruned[-test_indices,]
glm.fit = glm(defaulted~.-GrossChargeOffAmount, data = train_X, family = binomial)
glm.probs = predict.glm(glm.fit, newdata = train_X, type = "response")
glm.pred = as.numeric(glm.probs >= .5)
test_X <- test_X_pruned[test_indices,]
train_X <- mydata_pruned[-test_indices,]
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_X, family = binomial)
glm.probs <- predict.glm(glm.fit, newdata = train_X, type = "response")
glm.pred <- as.numeric(glm.probs >= .5)
mydata <- subset(mydata, LoanStatus!="EXEMPT"&LoanStatus!="CANCLD"&is.na(BusinessType))
state_v_default <- xtabs(~ BorrState + defaulted, data = mydata)
state_v_default <- as.data.frame.matrix(state_v_default)
state_v_default[-1,]
state_v_default$percentage <- state_v_default[,2]/(state_v_default[,1]+state_v_default[,2])
mydata <- read.csv("SBA_Loan_data.csv")
mydata$defaulted <- mydata$GrossChargeOffAmount > 0
mydata <- subset(mydata, LoanStatus!="EXEMPT"&LoanStatus!="CANCLD"&!is.na(BusinessType))
state_v_default <- xtabs(~ BorrState + defaulted, data = mydata)
state_v_default <- as.data.frame.matrix(state_v_default)
state_v_default[-1,]
state_v_default$percentage <- state_v_default[,2]/(state_v_default[,1]+state_v_default[,2])
year_v_default <- xtabs(~ ApprovalFiscalYear + defaulted, data = mydata)
year_v_default <- as.data.frame.matrix(year_v_default)
year_v_default$percentage <- year_v_default[,2]/(year_v_default[,1]+year_v_default[,2])
top_10_default_states <- row.names(state_v_default[order(state_v_default$percentage,decreasing=T)[1:10],])
top_10_default_years <- row.names(year_v_default[order(year_v_default$percentage,decreasing = T)[1:10],])
mydata$badState <- mydata$BorrState %in% top_10_default_states
mydata$badYear <- mydata$ApprovalFiscalYear %in% top_10_default_years
set.seed(1000)
test_indices <- sample(147423,10000)
test_X <- mydata[test_indices,]
test_X_pruned <- test_X[,!(names(test_X) %in% drops)]
mydata_pruned <- mydata[,!(names(mydata) %in% drops)]
test_X <- test_X_pruned[test_indices,]
train_X <- mydata_pruned[-test_indices,]
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_X, family = binomial)
glm.probs <- predict.glm(glm.fit, newdata = train_X, type = "response")
glm.pred <- as.numeric(glm.probs >= .5)
b_type_table <- xtabs(~ BusinessType + defaulted, data = mydata)
b_type_table <- as.data.frame.matrix(b_type_table)
b_type_table$percentage <- b_type_table[,2]/(b_type_table[,1]+b_type_table[,2])
View(b_type_table)
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc","NaicsCode")
test_X_pruned <- test_X[,!(names(test_X) %in% drops)]
mydata_pruned <- mydata[,!(names(mydata) %in% drops)]
myvars <- names(test_X_pruned) %in% c("defaulted")
lm.fit <- lm(GrossChargeOffAmount~., data = test_X_pruned[!myvars])
lda.fit = lda(defaulted~(GrossApproval+badState+badYear), data = train_X)
libary
libary(MASS)
library(MASS)
lda.fit = lda(defaulted~(GrossApproval+badState+badYear), data = train_X)
lda.fit.predict = predict(lda.fit, newdata = test_X)
warnings()
summary(lda.fit)
lda.fit.predict = predict(lda.fit, newdata = test_X)
lda.test.conf = table(lda.fit.predict$class, test_X$defaulted)
print(lda.test.conf)
lda.predict.ratio = (lda.test.conf[1,1]+lda.test.conf[2,2])/(lda.test.conf[1,1]+lda.test.conf[1,2]+lda.test.conf[2,1]+lda.test.conf[2,2])
print(lda.predict.ratio)
tpr <- lda.test.conf[2,2]/(lda.test.conf[2,2]+lda.test.conf[1,2])
fpr <- lda.test.conf[1,2]/(lda.test.conf[1,2]+lda.test.conf[1,1])
plot(fpr,tpr)
library(pROC)
plot(fpr,tpr)
lda.fit
lda.fit.predict
lda.fit.predict
View(lda.fit.predict)
lda.fit = lda(defaulted~(GrossApproval+badState+badYear), data = train_X)
lda.fit.predict = predict(lda.fit, newdata = test_X)
probs_positive_class = lda.predict_proba(test_X)[:,1]
probs_positive_class = lda.predict_proba(test_X)[:, 1]
lasso.mod=glmnet(x[train_X,],y[train_X],alpha=1,lambda=grid)
install(glmnet)
Install(glmnet)
library(glmnet)
install.packages("glmnet", repos = "http://cran.us.r-project.org")
library(glmnet)
lasso.mod=glmnet(x[train_X,],y[train_X],alpha=1,lambda=grid)
train_X
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_X, family = binomial)
summary(glm.fit)
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc","NaicsCode")
test_X_pruned <- test_X[,!(names(test_X) %in% drops)]
mydata_pruned <- mydata[,!(names(mydata) %in% drops)]
myvars <- names(test_X_pruned) %in% c("defaulted")
test_X <- test_X_pruned[test_indices,]
train_X <- mydata_pruned[-test_indices,]
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_X, family = binomial)
summary(glm.fit)
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc","NaicsCode","InitialInterestRate")
test_X_pruned <- test_X[,!(names(test_X) %in% drops)]
mydata_pruned <- mydata[,!(names(mydata) %in% drops)]
test_X <- test_X_pruned[test_indices,]
train_X <- mydata_pruned[-test_indices,]
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_X, family = binomial)
summary(glm.fit)
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_X, family = binomial)
summary(glm.fit)
glm.probs <- predict.glm(glm.fit, newdata = test_X, type = "response")
glm.pred <- as.numeric(glm.probs >= .5)
summary(glm.pred)
summary(glm.probs)
test_X
train_X
View(train_X)
test_X_pruned <- test_X[,!(names(test_X) %in% drops)]
test_X <- test_X_pruned[test_indices,]
train_X <- mydata_pruned[-test_indices,]
mixed.set <- mydata[sample(nrow(mydata)),]
mixed.set <- mydata[sample(nrow(mydata)),]
train <- mixed.set[1:307,]
set.seed(100)
mixed.set <- mydata[sample(nrow(mydata)),]
View(mixed.set)
train <- mixed.set[1:38364,]
test <- mixed.set[38365:54807,]
train_pruned <- train[,!(names(train) %in% drops)]
test_pruned <- test[,!(names(test) %in% drops)]
train_pruned <- train[,!(names(train) %in% drops)]
test_pruned <- test[,!(names(test) %in% drops)]
myvars <- names(test_pruned) %in% c("defaulted")
mydata <- read.csv("SBA_Loan_data.csv")
mydata$defaulted <- mydata$GrossChargeOffAmount > 0
mydata <- subset(mydata, LoanStatus!="EXEMPT"&LoanStatus!="CANCLD"&!is.na(BusinessType))
sum(!mydata$defaulted)/nrow(mydata)
state_v_default <- xtabs(~ BorrState + defaulted, data = mydata)
state_v_default <- as.data.frame.matrix(state_v_default)
state_v_default[-1,]
state_v_default$percentage <- state_v_default[,2]/(state_v_default[,1]+state_v_default[,2])
year_v_default <- xtabs(~ ApprovalFiscalYear + defaulted, data = mydata)
year_v_default <- as.data.frame.matrix(year_v_default)
year_v_default$percentage <- year_v_default[,2]/(year_v_default[,1]+year_v_default[,2])
b_type_table <- xtabs(~ BusinessType + defaulted, data = mydata)
b_type_table <- as.data.frame.matrix(b_type_table)
b_type_table$percentage <- b_type_table[,2]/(b_type_table[,1]+b_type_table[,2])
top_10_default_states <- row.names(state_v_default[order(state_v_default$percentage,decreasing=T)[1:10],])
top_10_default_years <- row.names(year_v_default[order(year_v_default$percentage,decreasing = T)[1:10],])
mydata$badState <- mydata$BorrState %in% top_10_default_states
mydata$badYear <- mydata$ApprovalFiscalYear %in% top_10_default_years
set.seed(100)
mixed.set <- mydata[sample(nrow(mydata)),]
train <- mixed.set[1:38364,]
test <- mixed.set[38365:54807,]
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc","NaicsCode","InitialInterestRate")
train_pruned <- train[,!(names(train) %in% drops)]
test_pruned <- test[,!(names(test) %in% drops)]
View(train_pruned)
myvars <- names(test_pruned) %in% c("defaulted")
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_pruned, family = binomial)
summary(glm.fit)
glm.probs <- predict.glm(glm.fit, newdata = test_pruned, type = "response")
glm.pred <- as.numeric(glm.probs >= .5)
View(glm.pred)
glm.pred = rep("Non-default",length(glm.probs))
glm.pred [glm.probs > 0.5] = "Default"
View(glm.pred)
glm.pred = rep("Non-default",length(glm.probs))
glm.pred [glm.probs > 0.5] = "Default"
table(glm.pred, mydata$defaulted)
View(mydata$defaulted)
length(mydata$defaulted)
length(glm.probs)
table(glm.pred, test_pruned$defaulted)
glm.pred = rep("No default",length(glm.probs))
glm.pred [glm.probs > 0.5] = "Yes-Default"
table(glm.pred, test_pruned$defaulted)
glm.predict.ratio = (glm.test.conf[1,1]+glm.test.conf[2,2])/(glm.test.conf[1,1]+glm.test.conf[1,2]+glm.test.conf[2,1]+glm.test.conf[2,2])
glm.test.conf <- table(glm.pred, test_pruned$defaulted)
glm.predict.ratio = (glm.test.conf[1,1]+glm.test.conf[2,2])/(glm.test.conf[1,1]+glm.test.conf[1,2]+glm.test.conf[2,1]+glm.test.conf[2,2])
glm.predict.ratio <- (glm.test.conf[1,1]+glm.test.conf[2,2])/(glm.test.conf[1,1]+glm.test.conf[1,2]+glm.test.conf[2,1]+glm.test.conf[2,2])
glm.predict.ratio
glm.pred = rep("No default",length(glm.probs))
glm.pred [glm.probs > 0.6] = "Yes-Default"
glm.test.conf <- table(glm.pred, test_pruned$defaulted)
glm.predict.ratio <- (glm.test.conf[1,1]+glm.test.conf[2,2])/(glm.test.conf[1,1]+glm.test.conf[1,2]+glm.test.conf[2,1]+glm.test.conf[2,2])
glm.predict.ratio
glm.pred = rep("No default",length(glm.probs))
glm.pred [glm.probs > 0.4] = "Yes-Default"
glm.test.conf <- table(glm.pred, test_pruned$defaulted)
glm.predict.ratio <- (glm.test.conf[1,1]+glm.test.conf[2,2])/(glm.test.conf[1,1]+glm.test.conf[1,2]+glm.test.conf[2,1]+glm.test.conf[2,2])
glm.predict.ratio
glm.pred = rep("No default",length(glm.probs))
glm.pred [glm.probs > 0.1] = "Yes-Default"
glm.test.conf <- table(glm.pred, test_pruned$defaulted)
glm.predict.ratio <- (glm.test.conf[1,1]+glm.test.conf[2,2])/(glm.test.conf[1,1]+glm.test.conf[1,2]+glm.test.conf[2,1]+glm.test.conf[2,2])
glm.predict.ratio
CLASSIFICATION_THRESHOLD = 0.1
glm.pred = rep("No default",length(glm.probs))
glm.pred [glm.probs > CLASSIFICATION_THRESHOLD] = "Yes-Default"
glm.test.conf <- table(glm.pred, test_pruned$defaulted)
library(MASS)
lda.fit = lda(defaulted~(GrossApproval+badState+badYear), data = train_pruned)
lda.fit.predict = predict(lda.fit, newdata = test_pruned)
lda.test.conf = table(lda.fit.predict$class, test_pruned$defaulted)
print(lda.test.conf)
print(lda.predict.ratio)
lda.predict.ratio = (lda.test.conf[1,1]+lda.test.conf[2,2])/(lda.test.conf[1,1]+lda.test.conf[1,2]+lda.test.conf[2,1]+lda.test.conf[2,2])
print(lda.predict.ratio)
print(lda.predict.ratio)
tpr <- lda.test.conf[2,2]/(lda.test.conf[2,2]+lda.test.conf[1,2])
fpr <- lda.test.conf[1,2]/(lda.test.conf[1,2]+lda.test.conf[1,1])
plot(fpr,tpr)
print(tpr)
print(fpr)
lda.fit.predict = predict(lda.fit, newdata = test_pruned)
lda.pred = rep("No default",length(lda.fit.predict))
lda.pred [lda.probs > CLASSIFICATION_THRESHOLD] = "Yes-Default"
lda.pred [lda.fit.predict > CLASSIFICATION_THRESHOLD] = "Yes-Default"
lda.fit.predict = predict(lda.fit, newdata = test_pruned, type = "response")
lda.pred = rep("No default",length(lda.fit.predict))
lda.pred [lda.fit.predict > CLASSIFICATION_THRESHOLD] = "Yes-Default"
View(lda.pred)
View(lda.fit.predict)
lda.fit.predict = predict(lda.fit, newdata = test_pruned, type = "response")
lda.test.conf = table(lda.fit.predict$class, test_pruned$defaulted)
print(lda.test.conf)
lda.predict.ratio = (lda.test.conf[1,1]+lda.test.conf[2,2])/(lda.test.conf[1,1]+lda.test.conf[1,2]+lda.test.conf[2,1]+lda.test.conf[2,2])
print(lda.predict.ratio)
lda.tpr <- lda.test.conf[2,2]/(lda.test.conf[2,2]+lda.test.conf[1,2])
lda.fpr <- lda.test.conf[1,2]/(lda.test.conf[1,2]+lda.test.conf[1,1])
plot(lda.fpr,lda.tpr)
print(lda.tpr)
print(lda.fpr)
print(glm.tpr)
glm.tpr <- glm..test.conf[2,2]/(glm.test.conf[2,2]+glm.test.conf[1,2])
glm.fpr <- glm.test.conf[1,2]/(glm.test.conf[1,2]+glm.test.conf[1,1])
glm.tpr <- glm..test.conf[2,2]/(glm.test.conf[2,2]+glm.test.conf[1,2])
glm.tpr <- glm.test.conf[2,2]/(glm.test.conf[2,2]+glm.test.conf[1,2])
print(glm.tpr)
print(glm.fpr)
View(lda.fit.predict)
lda.pred.t = sum(lda.fit.predict$posterior[,1] >= CLASSIFICATION_THRESHOLD)
lda.pred.f = sum(lda.fit.predict$posterior[,1] < CLASSIFICATION_THRESHOLD)
print(lda.pred.t, lda.pred.f)
print(lda.pred.t)
print(lda.pred.f)
CLASSIFICATION_THRESHOLD = 0.5
lda.pred.t = sum(lda.fit.predict$posterior[,1] >= CLASSIFICATION_THRESHOLD)
lda.pred.f = sum(lda.fit.predict$posterior[,1] < CLASSIFICATION_THRESHOLD)
print(lda.pred.t)
print(lda.pred.f)
lda.pred.f = sum(lda.fit.predict$posterior[,1] >= CLASSIFICATION_THRESHOLD)
lda.pred.t = sum(lda.fit.predict$posterior[,1] < CLASSIFICATION_THRESHOLD)
print(lda.pred.t)
print(lda.pred.f)
CLASSIFICATION_THRESHOLD = 0.1
lda.pred.f = sum(lda.fit.predict$posterior[,1] >= CLASSIFICATION_THRESHOLD)
lda.pred.t = sum(lda.fit.predict$posterior[,1] < CLASSIFICATION_THRESHOLD)
print(lda.pred.t)
print(lda.pred.f)
View(lda.fit.predict)
CLASSIFICATION_THRESHOLD = 0.5
lda.pred.t = sum(lda.fit.predict$posterior[,2] >= CLASSIFICATION_THRESHOLD)
lda.pred.f = sum(lda.fit.predict$posterior[,2] < CLASSIFICATION_THRESHOLD)
print(lda.pred.t)
print(lda.pred.f)
CLASSIFICATION_THRESHOLD = 0.1
lda.pred.t = sum(lda.fit.predict$posterior[,2] >= CLASSIFICATION_THRESHOLD)
lda.pred.f = sum(lda.fit.predict$posterior[,2] < CLASSIFICATION_THRESHOLD)
print(lda.pred.t)
print(lda.pred.f)
myvars <- names(test_pruned) %in% c("defaulted")
lm.fit <- lm(GrossChargeOffAmount~., data = test_pruned[!myvars])
summary(lm.fit) # show results
pairs(test_pruned)
lasso.mod=glmnet(x[train_pruned,],y[train_pruned],alpha=1,lambda=grid)
lm.fit <- lm(defaulted~., data = test_pruned[!myvars])
summary(lm.fit) # show results
lm.fit <- lm(defaulted~.-GrossChargeOffAmount, data = test_pruned[!myvars])
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_pruned, family = binomial)
lm.fit <- lm(defaulted~., data = train_pruned[!myvars])
View(train_pruned)
lm.fit <- lm(GrossChargeOffAmount~., data = train_pruned[!myvars])
summary(lm.fit) # show results
lm.fit <- lm(GrossChargeOffAmount~., data = test_pruned[!myvars])
summary(lm.fit) # show results
myvars <- names(test_pruned) %in% c("GrossChargeOffAmount")
lm.fit <- lm(defaulted~., data = test_pruned[!myvars])
summary(lm.fit) # show results
lasso.mod=glmnet(x[train_pruned,],y[train_pruned],alpha=1,lambda=grid)
?"glmnet"
myvars <- names(test_pruned) %in% c("defaulted")
lm.fit <- lm(GrossChargeOffAmount~., data = test_pruned[!myvars])
summary(lm.fit) # show results
lasso.mod=glmnet(test_pruned[!myvars],train_pruned$GrossChargeOffAmount,alpha=1,lambda=grid,family="binomial")
lasso.mod=glmnet(test_pruned[!myvars],test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid,family="binomial")
lasso.mod=glmnet(test_pruned[!myvars],test_pruned$GrossChargeOffAmount,alpha=1,family="binomial")
grid=10^seq(10,-2,length=100)
lasso.mod=glmnet(test_pruned[!myvars],test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid,family="binomial")
lasso.mod=glmnet(test_pruned[!myvars],test_pruned$defaulted,alpha=1,lambda=grid,family="binomial")
lasso.mod=glmnet(test_pruned[!myvars],test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
lasso.mod=glmnet(test_pruned[,!myvars],test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
lasso.mod=glmnet(test_pruned[,!myvars],test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
View(test_pruned)
test_pruned_subset <- subset(test_pruned, select = names(test_pruned) %in% c("defaulted","DeliveryMethod","BusinessType"))
View(test_pruned_subset)
test_pruned_subset <- subset(test_pruned, select = test_pruned[!myvars_new])
myvars_new <- names(test_pruned) %in% c("defaulted","DeliveryMethod","BusinessType")
test_pruned_subset <- subset(test_pruned, select = test_pruned[!myvars_new])
test_pruned_subset <- subset(test_pruned, select = !myvars_new)
View(test_pruned_subset)
lasso.mod=glmnet(test_pruned[,!myvars_new],test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
grid=10^seq(10,-2,length=100)
lasso.mod=glmnet(test_pruned[,!myvars_new],test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
lasso.mod=glmnet(test_pruned[!myvars_new],test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
lasso.mod=glmnet(test_pruned_subset,test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
lasso.mod=glmnet(test_pruned_subset,test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
lasso.mod=cv.glmnet(test_pruned_subset,test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
grid=10^seq(2,-2,length=100)
lasso.mod=cv.glmnet(test_pruned_subset,test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
View(test_pruned$GrossChargeOffAmount)
View(as.numeric(test_pruned_subset))
View(as.matrix(test_pruned_subset))
lasso.mod=cv.glmnet(as.marix(test_pruned_subset),test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
lasso.mod=cv.glmnet(as.matrix(test_pruned_subset),test_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
plot(lasso.mod)
summary(lasso.mod)
View(lamda.min)
View(lasso.mod.amda.min)
View(lasso.mod.lambda.min)
View(lambda.min)
View(lasso.mod)
View(lasso.mod["lambda.min"])
lasso.test=glmnet(as.matrix(test_pruned_subset),test_pruned$GrossChargeOffAmount,alpha=1,lambda=0.01)
plot(lasso.test)
View(lasso.test)
summary(lasso.test)
plot(lasso.test$glmnet.fit)
summary(coef(lasso.test))
coef(lasso.test)
coef(lm.fit)
summary(lm.fit)
coef(lasso.fit)
coef(lasso.test)
?predict
test_pruned_subset <- subset(test_pruned, select = !myvars_new)
lasso.mod=cv.glmnet(as.matrix(train_pruned_subset),train_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
train_pruned_subset <- subset(train_pruned, select = !myvars_new)
lasso.mod=cv.glmnet(as.matrix(train_pruned_subset),train_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
plot(lasso.mod)
bestlam <- lasso.mod$lambda.min
lasso.pred <- predict(lasso.mod,s=bestlam,newx=test_pruned)
hpi_data <- read.table("HPI_PO_state.txt", header=TRUE, sep="\t")
View(hpi_data)
test_merge <- merge(x=mydata, y=hpi_data, by.x=c("BorrState","ApprovalFiscalYear"), by.y=c("state","year"))
test_merge <- merge(x=mydata, y=hpi_data, by.x=c("BorrState","ApprovalFiscalYear"), by.y=c("state","yr"))
View(test_merge)
hpi_data <- hpi_data[-"warning"]
hpi_data <- hpi_data[-warning]
hpi_data <- hpi_data[-Warning]
hpi_data <- hpi_data[-"Warning""]
hpi_data <- hpi_data[-"Warning"]
hpi_data <- hpi_data[,-which(names(hpi_data)=="Warning")]
hpi.badcols <- c("Warning","index_nsa")
hpi_data <- hpi_data[,-which(names(hpi_data) %in% hpi.badcols)]
hpi_data <- subset(hpi_data, qtr!=4)
hpi_data <- read.table("HPI_PO_state.txt", header=TRUE, sep="\t")
hpi.badcols <- c("Warning","index_nsa")
hpi_data <- hpi_data[,-which(names(hpi_data) %in% hpi.badcols)]
hpi_data <- subset(hpi_data, qtr==4)
hpi.badcols <- c("Warning","index_nsa", "qtr")
hpi_data <- read.table("HPI_PO_state.txt", header=TRUE, sep="\t")
hpi.badcols <- c("Warning","index_nsa", "qtr")
hpi_data <- subset(hpi_data, qtr==4)
hpi_data <- hpi_data[,-which(names(hpi_data) %in% hpi.badcols)]
test_merge <- merge(x=mydata, y=hpi_data, by.x=c("BorrState","ApprovalFiscalYear"), by.y=c("state","yr"))
hpi_data <- read.table("HPI_PO_state.txt", header=TRUE, sep="\t")
names(hpi_data)[names(hpi_data)=="index_sa"] <- "HousingPriceIndex"
hpi.badcols <- c("Warning","index_nsa", "qtr")
hpi_data <- subset(hpi_data, qtr==4)
hpi_data <- hpi_data[,-which(names(hpi_data) %in% hpi.badcols)]
test_merge <- merge(x=mydata, y=hpi_data, by.x=c("BorrState","ApprovalFiscalYear"), by.y=c("state","yr"))
mydata <- merge(x=mydata, y=hpi_data, by.x=c("BorrState","ApprovalFiscalYear"), by.y=c("state","yr"))
unemp_data <- read.table("State_level_unemployment_rate_Monthly.txt", header=TRUE, sep="\t")
View(unemp_data)
unemp_data_subset <- subset(unemp_data, grepl("[0-9]^-12-01",DATE)==TRUE)
View(unemp_data_subset)
unemp_data_subset <- subset(unemp_data, grep("[0-9]^-12-01",DATE)==TRUE)
View(unemp_data_subset)
unemp_data_subset <- subset(unemp_data, grep("[0-9]{4}-12-01",DATE)==TRUE)
unemp_data_subset <- unemp_data[grep("-12-01"), unemp_data$DATE]
unemp_data_subset <- subset(unemp_data, grep("-12-01",DATE)==TRUE)
View(unemp_data_subset)
unemp_data_subset <- unemp_data[grep("-12-01", unemp_data$DATE), ]
fedfunds_data <- read.table("fredgraph.xls", header=TRUE, sep"\t")
fedfunds_data <- read.table("fredgraph.xls", header=TRUE, sep="\t")
fedfunds_data <- read.table("fredgraph.xls", header=TRUE, sep="\t")
fedfunds_data <- read.csv("fredgraph.csv")
View(fedfunds_data)
fedfunds_data_subset <- fedfunds_data[grep("-12-01", fedfunds_data$observation_date), ]
View(fedfunds_data_subset)
fedfunds_data$year <- grep("([0-9]{4})^", fedfunds_data_subset$observation_date)
fedfunds_data$year <- grep("^", fedfunds_data_subset$observation_date)
fedfunds_data$year <- grep("*", fedfunds_data_subset$observation_date)
temp <- grep("*", fedfunds_data_subset$observation_date)
View(temp)
temp <- substr(fedfunds_data_subset[,'observation_date'], 1, nchar(fedfunds_data_subset[,'observation_date'])-3)
temp <- substr(fedfunds_data_subset[,'observation_date'], 1, nchar(fedfunds_data_subset[,'observation_date'])-3)
temp <- gsub("-12-01", "", fedfunds_data_subset$observation_date)
View(temp)
fedfunds_data_subset <- fedfunds_data[grep("-12-01", fedfunds_data$observation_date),]
fedfunds_data_subset$observation_date <- gsub("-12-01", "", fedfunds_data_subset$observation_date)
unemp_data_subset$DATE <- gsub("-12-01", "", unemp_data_subset$DATE)
View(mydata)
mydata <- merge(x=mydata, y=fedfunds_data_subset, by.x="ApprovalFiscalYear", by.y="observation_date")
names(x)[unemp_data_subset] <- gsub("UR","",names(x)[unemp_data_subset])
names(unemp_data_subset) <- gsub("UR","",names(unemp_data_subset))
mydata$UnemploymentRate <- unemp_data_subset[mydata$ApprovalFiscalYear,mydata$BorrState]
test_match <- merge(x=mydata, y=unemp_data_subset, by.x=c("ApprovalFiscalYear","BorrState"),by.y=c("DATE"))
test_match <- match(mydata["ApprovalFiscalYear","BorrState"],unemp_data_subset["DATE",])
View(test_match)
test_indices <- match(mydata$ApprovalFiscalYear,unemp_data_subset$DATE)
View(test_indices)
test_indices <- as.data.frame(as.table(unemp_data_subset))
