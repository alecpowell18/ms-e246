i = 1
for(yr in 1:nrow(unemp_data_subset)) {
for(st in names(unemp_data_subset)) {
temp_table[i, ] = c(yr+1975,st,unemp_data_subset[yr,st])
i=i+1
}
}
names(temp_table)[names(temp_table)=="X1"] <- "YR"
names(temp_table)[names(temp_table)=="X2"] <- "ST"
names(temp_table)[names(temp_table)=="X3"] <- "UnemploymentRate"
mydata <- merge(x=mydata, y=temp_table, by.x=c("ApprovalFiscalYear","BorrState"), by.y=c("YR","ST"))
mydata$UnemploymentRate <- as.numeric(mydata$UnemploymentRate)
#Merge with Federal Funds Rate data from St. Louis Fed (works!)
fedfunds_data <- read.csv("fredgraph.csv")
fedfunds_data_subset <- fedfunds_data[grep("-12-01", fedfunds_data$observation_date),]
fedfunds_data_subset$observation_date <- gsub("-12-01", "", fedfunds_data_subset$observation_date)
fedfunds_data$year <- grep("([0-9]{4})^", fedfunds_data_subset$observation_date)
View(fedfunds_data)
fedfunds_data_subset$observation_date <- gsub("-12-01", "", fedfunds_data_subset$observation_date)
View(fedfunds_data_subset)
mydata <- merge(x=mydata, y=fedfunds_data_subset, by.x="ApprovalFiscalYear", by.y="observation_date")
set.seed(100)
mixed.set <- mydata[sample(nrow(mydata)),]
train <- mixed.set[1:37397,]
test <- mixed.set[38365:54807,]
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc","NaicsCode","InitialInterestRate")
train_pruned <- train[,!(names(train) %in% drops)]
test_pruned <- test[,!(names(test) %in% drops)]
myvars <- names(test_pruned) %in% c("defaulted")
lm.fit <- lm(GrossChargeOffAmount~., data = test_pruned[!myvars])
summary(lm.fit) # show results
myvars_new <- names(train_pruned) %in% c("defaulted","DeliveryMethod","BusinessType")
train_pruned_subset <- subset(train_pruned, select = !myvars_new)
test_pruned_subset <- subset(test_pruned, select = !myvars_new)
#lasso
grid=10^seq(2,-2,length=100)
#compute min lambda to use for lasso.train
lasso.mod=cv.glmnet(as.matrix(train_pruned_subset),train_pruned$GrossChargeOffAmount,alpha=1,lambda=grid)
plot(lasso.mod)
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_pruned, family = "binomial")
glm.probs <- predict.glm(glm.fit, newdata = test_pruned, type = "response")
summary(glm.fit)
glm.probs <- predict.glm(glm.fit, newdata = test_pruned, type = "response")
library(glmnet)
library(ROCR)
grid=10^seq(2,-2,length=100)
CLASSIFICATION_THRESHOLD = 0.5
indepVars <- !(names(train_pruned) %in% c("defaulted", "GrossChargeOffAmount"))
train_indep <- train_pruned[, indepVars]
test_indep <- test_pruned[, indepVars]
#lasso logistic regression; k fold cross validation
log.reg.l1 <- cv.glmnet(data.matrix(train_indep),
train_pruned$defaulted,
family="binomial", lambda = grid)
plot(log.reg.l1)
glmnet_train_AUC <- cv.glmnet(data.matrix(train_indep),
train_pruned$defaulted,
family="binomial",
type.measure="auc", lambda = grid)
plot(glmnet_train_AUC)
train.phat <- predict(log.reg.l1,
newx=data.matrix(train_indep),
s="lambda.min")
train.pred <- prediction(train.phat, train_pruned$defaulted)
train.roc <- performance(train.pred, measure = "tpr", x.measure = "fpr")
plot(train.roc,colorize=FALSE, col="black") # plot ROC curve
lines(c(0,1),c(0,1),col = "gray", lty = 4 )
train.min.cost = performance(train.pred, measure = "cost")
train.pred@cutoffs[[1]][which.min(train.min.cost@y.values[[1]])]
test.phat <- predict(log.reg.l1,
newx=data.matrix(test_indep),
s="lambda.min")
test.pred <- prediction(test.phat, test_pruned$defaulted)
test.roc <- performance(test.pred, measure = "tpr", x.measure = "fpr")
plot(test.roc,colorize=FALSE, col="black")
lines(c(0,1),c(0,1),col = "gray", lty = 4 )
glmIndepVars <- !(names(train_pruned) %in% c("GrossChargeOffAmount"))
glm_train_indep <- train_pruned[,glmIndepVars]
glm_test_indep <- test_pruned[,glmIndepVars]
glm.fit <- glm(defaulted~., data = glm_train_indep, family = binomial)
glm.probs <- predict.glm(glm.fit, newdata = glm_train_indep, type = "response")
glm.train.pred <- prediction(glm.probs, train_pruned$defaulted)
glm.train.perf <- performance(glm.train.pred, measure = "tpr", x.measure = "fpr")
plot(glm.train.perf,colorize=FALSE, col="black") # plot ROC curve
lines(c(0,1),c(0,1),col = "gray", lty = 4 )
#accuracy
glm.train.err <- performance(glm.train.pred, measure = "err")
plot(glm.train.err, col = "red")
glm.train.fpr <- performance(glm.train.pred, measure = "fpr")
plot(glm.train.fpr, add=TRUE, col = "green")
glm.train.fnr <- performance(glm.train.pred, measure = "fnr")
plot(glm.train.fnr, add=TRUE, col = "blue")
glm.test.probs <- predict.glm(glm.fit, newdata = glm_test_indep, type = "response")
glm.test.pred <- prediction(glm.test.probs, test_pruned$defaulted)
glm.test.err <- performance(glm.test.pred, measure = "err")
plot(glm.test.err, col = "black", xlim=c(0,.5), xlab = "Threshold")
glm.test.fpr <- performance(glm.test.pred, measure = "fpr")
plot(glm.test.fpr, add=TRUE, col = "red", lty = 3)
glm.test.fnr <- performance(glm.test.pred, measure = "fnr")
plot(glm.test.fnr, add=TRUE, col = "blue", lty=2)
legend("top", cex = .5,
c("Total Error Rate","False Positive Rate","False Negative Rate"),
lty=c(1,1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5,2.5),col=c("black","red","blue"))
library(boot)
bs <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(coef(fit))
}
results <- boot(data=glm_train_indep, statistic=bs,
R=1000, formula=defaulted~HousingPriceIndex+FEDFUNDS+UnemploymentRate)
results
plot(results, index=1) # intercept
plot(results, index=2) # HPI
plot(results, index=3) # FEDFUNDS
plot(results, index=4) # UnemploymentRate
boot.ci(results, conf = 0.95, type=c("norm","perc"), index=1) # intercept
boot.ci(results, conf = 0.95, type=c("norm","perc"), index=2) # HPI
boot.ci(results, conf = 0.95, type=c("norm","perc"), index=3) # FEDFUNDS
boot.ci(results, conf = 0.95, type=c("norm","perc"), index=4) # Unemployment
ValueAtRisk.boot = function(x, idx, p=0.05, w=100000) {
# x     data to be resampled
# idx       vector of scrambled indices created by boot() function
# p       probability value for VaR calculation
q = mean(x[idx]) + sd(x[idx])*qnorm(p)
VaR = (exp(q) - 1)*w
VaR
}
VaR.boot = boot(glm_test_indep, statistic = ValueAtRisk.boot, R=999)
train_indep <- train_pruned[, indepVars]
VaR.boot = boot(train_indep, statistic = ValueAtRisk.boot, R=999)
household_income_data <- read.table("medianhhincome.csv", header=TRUE, sep=",")
View(household_income_data)
names(household_income_data) <- gsub("X","",names(household_income_data))
household_income_subset <- household_income_data[,!(names(household_income_data) %in% c("State"))]
View(household_income_subset)
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_income_data)) {
for(st in nrow(household_income_data)) {
temp_table[i, ] = c(2016-yr,st,household_income_data[yr,st])
i=i+1
}
}
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_income_data)) {
for(st in nrow(household_income_data)-1) {
temp_table[i, ] = c(2016-yr,st,household_income_data[yr,st])
i=i+1
}
}
temp_table[i, ] = c(2016-yr,row.names(household_income_data)[st,],household_income_data[yr,st])
temp_table[i, ] = c(2016-yr,row.names(household_income_data)[st],household_income_data[yr,st])
mydata$TermYearly <- (mydata$TermInMonths)%12 == 0
mydata$TermYearly <- mydata$TermInMonths%12
mydata$TermYearly <- mydata$TermInMonths%%12 == 0
n_occur <- data.frame(table(mydata$BorrName))
View(n_occur)
View(n_occur)
n_occur[n_occur$Freq > 1,]
n_occur <- data.frame(table(mydata$BorrName))
n_occur <- n_occur[n_occur$Freq > 1,]
mydata$IsDuplicateBorrower <- mydata$BorrName %in% n_occur
mydata$IsDuplicateBorrower <- mydata$BorrName %in% n_occur[,1]
temp_table[i, ] = c(2016-yr,row.names(household_income_data)[st],household_income_data[yr,st])
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
View(household_income_data)
View(temp_table)
i = 1
for(yr in 2:ncol(household_income_data)) {
for(st in nrow(household_income_data)-1) {
temp_table[i, ] = c(2016-yr,row.names(household_income_data)[st],household_income_data[yr,st])
i=i+1
}
}
ncol(household_income_data)
nrow(household_income_data)
results
plot(results, index=1) # intercept
plot(results, index=2) # HPI
plot(results, index=3) # FEDFUNDS
plot(results, index=4) # UnemploymentRate
boot.ci(results, conf = 0.95, type=c("norm","perc"), index=1) # intercept
boot.ci(results, conf = 0.95, type=c("norm","perc"), index=2) # HPI
boot.ci(results, conf = 0.95, type=c("norm","perc"), index=3) # FEDFUNDS
boot.ci(results, conf = 0.95, type=c("norm","perc"), index=3) # FEDFUNDS
boot.ci(results, conf = 0.95, type=c("norm","perc"), index=4) # Unemployment
ValueAtRisk.boot = function(x, idx, p=0.05, w=100000) {
q = mean(x[idx]) + sd(x[idx])*qnorm(p)
VaR = (exp(q) - 1)*w
VaR
}
VaR.boot = boot(train_indep, statistic = ValueAtRisk.boot, R=999)
VaR.boot
ValueAtRisk.boot = function(x, idx, p=0.05, w=100000) {
q = mean(x[idx,]) + sd(x[idx,])*qnorm(p)
VaR = (exp(q) - 1)*w
VaR
}
VaR.boot = boot(train_indep, statistic = ValueAtRisk.boot, R=999)
View(train_indep)
View(glm_train_indep)
glm_train_indep$is504 <- mydata$DeliveryMethod == "504"
glm_train_indep$is504 <- glm_train_indep$DeliveryMethod == "504"
glm_train_indep$isPCLP <- glm_train_indep$DeliveryMethod == "PCLP"
glm_train_indep$isALP <- glm_train_indep$DeliveryMethod == "ALP"
n_occur_temp <- data.frame(table(glm_train_indep$DeliveryMethod))
View(n_occur_temp)
glm_train_indep$isRefi <- glm_train_indep$DeliveryMethod == "504REFI"
glm_train_indep$isIndiv <- glm_train_indep$BusinessType == "INDIVIDUAL"
glm_train_indep$isCorp <- glm_train_indep$BusinessType == "CORPORATION"
boot_drops <- c("DeliveryMethod","BusinessType")
glm_train_indep <- glm_train_indep[,!(names(glm_train_indep) %in% boot_drops)]
VaR.boot = boot(glm_train_indep, statistic = ValueAtRisk.boot, R=999)
ValueAtRisk.boot = function(x, idx, p=0.05, w=100000) {
q = mean(x[idx]) + sd(x[idx])*qnorm(p)
VaR = (exp(q) - 1)*w
VaR
}
VaR.boot = boot(glm_train_indep, statistic = ValueAtRisk.boot, R=999)
ValueAtRisk.boot = function(x, idx, p=0.05, w=100000) {
q = mean(x[idx,]) + sd(x[idx,])*qnorm(p)
VaR = (exp(q) - 1)*w
VaR
}
VaR.boot = boot(glm_train_indep, statistic = ValueAtRisk.boot, R=999)
View(glm_train_indep$ApprovalFiscalYear)
glm_train_indep$isPartnership <- glm_train_indep$BusinessType == "PARTNERSHIP"
glm_train_indep$isPartnership <- glm_train_indep$BusinessType == "PARTNERSHIP"
glm_train_indep <- train_pruned[,glmIndepVars]
glm_train_indep$is504 <- glm_train_indep$DeliveryMethod == "504"
glm_train_indep$isPCLP <- glm_train_indep$DeliveryMethod == "PCLP"
glm_train_indep$isALP <- glm_train_indep$DeliveryMethod == "ALP"
glm_train_indep$isRefi <- glm_train_indep$DeliveryMethod == "504REFI"
glm_train_indep$isIndiv <- glm_train_indep$BusinessType == "INDIVIDUAL"
glm_train_indep$isPartnership <- glm_train_indep$BusinessType == "PARTNERSHIP"
glm_train_indep$isCorp <- glm_train_indep$BusinessType == "CORPORATION"
boot_drops <- c("DeliveryMethod","BusinessType")
glm_train_indep <- glm_train_indep[,!(names(glm_train_indep) %in% boot_drops)]
VaR.boot = boot(glm_train_indep, statistic = ValueAtRisk.boot, R=999)
results <- boot(data=glm_train_indep, statistic=bs,
R=1000, formula=defaulted~HousingPriceIndex+FEDFUNDS+UnemploymentRate)
# view results
results
VaR.boot = boot(glm_train_indep, statistic = ValueAtRisk.boot, R=999)
sp_data <- read.csv("SP-data.csv")
View(sp_data)
mydata <- merge(x=mydata, y=sp_data, by.x="ApprovalFiscalYear", by.y="Year")
View(mydata)
household_income_data <- read.table("medianhhincome.csv", header=TRUE, sep=",")
names(household_income_data) <- gsub("X","",names(household_income_data))
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_income_data)) {
for(st in nrow(household_income_data)-1) {
temp_table[i, ] = c(2016-yr,row.names(household_income_data)[st],household_income_data[yr,st])
i=i+1
}
}
View(temp_table)
View(household_income_data)
household_income_data[2,1]
household_income_data[2,2]
for(yr in 2:ncol(household_income_data)) {
for(st in nrow(household_income_data)-1) {
temp_table[i, ] = c(2016-yr,row.names(household_income_data)[st],household_income_data[st,yr])
i=i+1
}
}
for(yr in 2:ncol(household_income_data)) {
for(st in 1:nrow(household_income_data)-1) {
temp_table[i, ] = c(2016-yr,row.names(household_income_data)[st],household_income_data[st,yr])
i=i+1
}
}
row.names(household_income_data)
st
household_income_data[50,1]
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_income_data)) {
for(st in 1:nrow(household_income_data)-1) {
temp_table[i, ] = c(2016-yr,household_income_data[st,1],household_income_data[st,yr])
i=i+1
}
}
household_income_data[st,yr]
household_income_data[st,yr][0]
household_income_data[st,]
household_income_data[st,yr]
household_income_data[st,yr]
household_income_data
household_income_data[st,yr]
household_income_data[st][yr]
household_income_data[st,yr]
household_income_data[st,yr] + 1
household_income_data[st,]
household_income_data[st,'2012']
household_income_data[st,2012]
household_income_data[st,1]
household_income_data[st,2]
View (household_income_data)
household_income_data[st,3]
str(household_income_data[st,3])
str(household_income_data)
household_mat <- as.matrix(household_income_data)
household_mar[st, yr]
household_mat[st, yr]
View(household_mat)
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_mat)) {
for(st in 1:nrow(household_mat)-1) {
temp_table[i, ] = c(2016-yr,household_mat[st,1],household_mat[st,yr])
i=i+1
}
}
ncol(household_mat)
View(household_mat)
names(temp_table)[names(temp_table)=="X1"] <- "YR"
names(temp_table)[names(temp_table)=="X2"] <- "ST"
names(temp_table)[names(temp_table)=="X3"] <- "HouseholdIncome"
mydata <- merge(x=mydata, y=temp_table, by.x=c("ApprovalFiscalYear","BorrState"), by.y=c("YR","ST"))
mydata$HouseholdIncome <- as.numeric(mydata$HouseholdIncome)
mydata <- merge(x=mydata, y=temp_table, by.x=c("ApprovalFiscalYear","BorrState"), by.y=c("YR","ST"))
mydata$HouseholdIncome.y <- as.numeric(mydata$HouseholdIncome.y)
mydata <- read.csv("SBA_Loan_data.csv")
# Making new column boolean for default status
mydata$defaulted <- mydata$GrossChargeOffAmount > 0
#take out status=EXEMPT and status=CANCLD
mydata <- subset(mydata, LoanStatus!="EXEMPT"&LoanStatus!="CANCLD"&!is.na(BusinessType))
#find loans where term is (not) yearly
mydata$TermYearly <- mydata$TermInMonths%%12 == 0
n_occur <- data.frame(table(mydata$BorrName))
n_occur <- n_occur[n_occur$Freq > 1,]
mydata$IsDuplicateBorrower <- mydata$BorrName %in% n_occur[,1]
#Merge with Housing Price Index data from FHFA (works!)
hpi_data <- read.table("HPI_PO_state.txt", header=TRUE, sep="\t")
names(hpi_data)[names(hpi_data)=="index_sa"] <- "HousingPriceIndex"
hpi.badcols <- c("Warning","index_nsa", "qtr")
hpi_data <- subset(hpi_data, qtr==4)
hpi_data <- hpi_data[,-which(names(hpi_data) %in% hpi.badcols)]
mydata <- merge(x=mydata, y=hpi_data, by.x=c("BorrState","ApprovalFiscalYear"), by.y=c("state","yr"))
#Merge with State Unemployment Rate data from BLS
unemp_data <- read.table("State_level_unemployment_rate_Monthly.txt", header=TRUE, sep="\t")
unemp_data_subset <- unemp_data[grep("-12-01", unemp_data$DATE), ]
unemp_data_subset$DATE <- gsub("-12-01", "", unemp_data_subset$DATE)
names(unemp_data_subset) <- gsub("UR","",names(unemp_data_subset))
#SPLICE UNEMPLOYMENT RATE DATA INTO MYDATA TABLE (works)
unemp_data_subset <- unemp_data_subset[,!(names(unemp_data_subset) %in% c("DATE"))]
temp_table <- data.frame(matrix(NA, nrow = 2000, ncol = 3))
for(yr in 1:nrow(unemp_data_subset)) {
i = 1
for(st in names(unemp_data_subset)) {
i=i+1
temp_table[i, ] = c(yr+1975,st,unemp_data_subset[yr,st])
}
}
names(temp_table)[names(temp_table)=="X1"] <- "YR"
names(temp_table)[names(temp_table)=="X2"] <- "ST"
names(temp_table)[names(temp_table)=="X3"] <- "UnemploymentRate"
mydata <- merge(x=mydata, y=temp_table, by.x=c("ApprovalFiscalYear","BorrState"), by.y=c("YR","ST"))
mydata$UnemploymentRate <- as.numeric(mydata$UnemploymentRate)
#Merge with Federal Funds Rate data from St. Louis Fed (works!)
fedfunds_data <- read.csv("fredgraph.csv")
fedfunds_data_subset <- fedfunds_data[grep("-12-01", fedfunds_data$observation_date),]
fedfunds_data_subset$observation_date <- gsub("-12-01", "", fedfunds_data_subset$observation_date)
mydata <- merge(x=mydata, y=fedfunds_data_subset, by.x="ApprovalFiscalYear", by.y="observation_date")
#Merge with Median Household Income data from US Census Bureau
household_income_data <- read.table("medianhhincome.csv", header=TRUE, sep=",")
names(household_income_data) <- gsub("X","",names(household_income_data))
household_mat <- as.matrix(household_income_data)
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_mat)) {
for(st in 1:nrow(household_mat)-1) {
temp_table[i, ] = c(2016-yr,household_mat[st,1],household_mat[st,yr])
i=i+1
}
}
mydata <- read.csv("SBA_Loan_data.csv")
mydata$defaulted <- mydata$GrossChargeOffAmount > 0
mydata <- subset(mydata, LoanStatus!="EXEMPT"&LoanStatus!="CANCLD"&!is.na(BusinessType))
#find loans where term is (not) yearly
mydata$TermYearly <- mydata$TermInMonths%%12 == 0
#find duplicate borrowers
n_occur <- data.frame(table(mydata$BorrName))
n_occur <- n_occur[n_occur$Freq > 1,]
mydata$IsDuplicateBorrower <- mydata$BorrName %in% n_occur[,1]
#Merge with Housing Price Index data from FHFA (works!)
hpi_data <- read.table("HPI_PO_state.txt", header=TRUE, sep="\t")
names(hpi_data)[names(hpi_data)=="index_sa"] <- "HousingPriceIndex"
hpi.badcols <- c("Warning","index_nsa", "qtr")
hpi_data <- subset(hpi_data, qtr==4)
hpi_data <- hpi_data[,-which(names(hpi_data) %in% hpi.badcols)]
mydata <- merge(x=mydata, y=hpi_data, by.x=c("BorrState","ApprovalFiscalYear"), by.y=c("state","yr"))
#Merge with State Unemployment Rate data from BLS
unemp_data <- read.table("State_level_unemployment_rate_Monthly.txt", header=TRUE, sep="\t")
unemp_data_subset <- unemp_data[grep("-12-01", unemp_data$DATE), ]
unemp_data_subset$DATE <- gsub("-12-01", "", unemp_data_subset$DATE)
names(unemp_data_subset) <- gsub("UR","",names(unemp_data_subset))
#SPLICE UNEMPLOYMENT RATE DATA INTO MYDATA TABLE (works)
unemp_data_subset <- unemp_data_subset[,!(names(unemp_data_subset) %in% c("DATE"))]
temp_table <- data.frame(matrix(NA, nrow = 2000, ncol = 3))
i = 1
for(yr in 1:nrow(unemp_data_subset)) {
for(st in names(unemp_data_subset)) {
temp_table[i, ] = c(yr+1975,st,unemp_data_subset[yr,st])
i=i+1
}
}
names(temp_table)[names(temp_table)=="X1"] <- "YR"
names(temp_table)[names(temp_table)=="X2"] <- "ST"
names(temp_table)[names(temp_table)=="X3"] <- "UnemploymentRate"
mydata <- merge(x=mydata, y=temp_table, by.x=c("ApprovalFiscalYear","BorrState"), by.y=c("YR","ST"))
mydata$UnemploymentRate <- as.numeric(mydata$UnemploymentRate)
fedfunds_data <- read.csv("fredgraph.csv")
fedfunds_data_subset <- fedfunds_data[grep("-12-01", fedfunds_data$observation_date),]
fedfunds_data_subset$observation_date <- gsub("-12-01", "", fedfunds_data_subset$observation_date)
mydata <- merge(x=mydata, y=fedfunds_data_subset, by.x="ApprovalFiscalYear", by.y="observation_date")
#Merge with Median Household Income data from US Census Bureau
household_income_data <- read.table("medianhhincome.csv", header=TRUE, sep=",")
names(household_income_data) <- gsub("X","",names(household_income_data))
household_mat <- as.matrix(household_income_data)
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_mat)) {
for(st in 1:nrow(household_mat)-1) {
temp_table[i, ] = c(2016-yr,household_mat[st,1],household_mat[st,yr])
i=i+1
}
}
names(temp_table)[names(temp_table)=="X1"] <- "YR"
names(temp_table)[names(temp_table)=="X2"] <- "ST"
names(temp_table)[names(temp_table)=="X3"] <- "HouseholdIncome"
temp_table[3,4]
temp_table[3,]
temp_table[3,3]
as.numeric(temp_table[3,3])
as.numeric(as.character(temp_table[3,3]))
strtoi(temp_table[3,3])
household_income_data[3]
household_income_data[3]$`2013`
household_income_data$`2013`
household_income_data$`2013`[3]
household_income_data[3]''
household_income_data[3]
household_income_data[3][3[]]
household_income_data[3][3]
household_income_data[3][3,]
household_income_data <- read.csv("medianhhincome.csv", header=TRUE)
View(household_income_data)
names(household_income_data) <- gsub("X","",names(household_income_data))
household_income_data[3,3]
household_mat <- as.matrix(household_income_data)
household_mat[3,3]
yr
household_mat[st,1]
household_mat[st,yr]
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_mat)) {
for(st in 1:nrow(household_mat)-1) {
temp_table[i, ] = c(2016-yr,household_mat[st,1],household_mat[st,yr])
i=i+1
}
}
names(temp_table)[names(temp_table)=="X1"] <- "YR"
names(temp_table)[names(temp_table)=="X2"] <- "ST"
names(temp_table)[names(temp_table)=="X3"] <- "HouseholdIncome"
mydata$ApprovalFiscalYear
temp_table[0]
temp_table[1]
household_mat[st,yr]
as.character(household_mat[st,yr])
strtoi(as.character(household_mat[st,yr]))
strtoi(as.character(household_mat[st,yr]),10)
as.integer(household_mat[st,yr])
household_mat <- as.matrix(sapply(household_income_data,as.numeric))
household_mat[st,yr]
View(household_mat)
household_mat <- as.matrix(household_income_data)
View(household_mat)
View(household_mat)
household_mat[st,yr]
household_income_data[st,yr]
as.numeric(household_income_data[st,yr])
as.character(household_income_data[st,yr])
as.integer(as.character(household_income_data[st,yr]))
as.integer("29460")
as.integer(gsub(",","",as.character(household_income_data[st,yr])))
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_mat)) {
for(st in 1:nrow(household_mat)-1) {
temp_table[i, ] = c(2016-yr,household_mat[st,1],as.integer(gsub(",","",household_mat[st,yr])))
i=i+1
}
}
names(temp_table)[names(temp_table)=="X1"] <- "YR"
names(temp_table)[names(temp_table)=="X2"] <- "ST"
names(temp_table)[names(temp_table)=="X3"] <- "HouseholdIncome"
mydata <- merge(x=mydata, y=temp_table, by.x=c("ApprovalFiscalYear","BorrState"), by.y=c("YR","ST"))
mydata$HouseholdIncome <- as.numeric(mydata$HouseholdIncome)
mixed.set <- mydata[sample(nrow(mydata)),]
train <- mixed.set[1:37397,]
test <- mixed.set[38365:54807,]
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc","NaicsCode","InitialInterestRate")
train_pruned <- train[,!(names(train) %in% drops)]
test_pruned <- test[,!(names(test) %in% drops)]
