library(stats)
min_lambda <- glmnet_train_AUC$lambda.min
glmnet_train_AUC <- cv.glmnet(data.matrix(train_indep),
train_pruned$defaulted,
family="binomial",
type.measure="auc", lambda = grid)
library(glmnet)
log.reg.l1 <- cv.glmnet(data.matrix(train_indep),
train_pruned$defaulted,
family="binomial", lambda = grid)
train_indep <- train_pruned[, indepVars]
test_indep <- test_pruned[, indepVars]
log.reg.l1 <- cv.glmnet(data.matrix(train_indep),
train_pruned$defaulted,
family="binomial", lambda = grid)
plot(log.reg.l1)
glmnet_train_AUC <- cv.glmnet(data.matrix(train_indep),
train_pruned$defaulted,
family="binomial",
type.measure="auc", lambda = grid)
min_lambda=0.7
random_sample <- glm_train_indep[sample(nrow(iris), 5), ]
random_sample <- glm_train_indep[sample(nrow(iris), 500), ]
random_sample <- glm_train_indep[sample(nrow(glm_train_indep), 500), ]
View(random_sample)
glm_train_indep$is504 <- glm_train_indep$DeliveryMethod == "504"
glm_train_indep$isPCLP <- glm_train_indep$DeliveryMethod == "PCLP"
glm_train_indep$isALP <- glm_train_indep$DeliveryMethod == "ALP"
glm_train_indep$isRefi <- glm_train_indep$DeliveryMethod == "504REFI"
n_occur_temp <- data.frame(table(glm_train_indep$DeliveryMethod))
glm_train_indep$isIndiv <- glm_train_indep$BusinessType == "INDIVIDUAL"
glm_train_indep$isPartnership <- glm_train_indep$BusinessType == "PARTNERSHIP"
glm_train_indep$isCorp <- glm_train_indep$BusinessType == "CORPORATION"
boot_drops <- c("DeliveryMethod","BusinessType")
glm_train_indep <- glm_train_indep[,!(names(glm_train_indep) %in% boot_drops)]
random_sample <- glm_train_indep[sample(nrow(glm_train_indep), 500), ]
View(random_sample)
VaRhistorical <- function(returnVector, prob=.05,
notional=1, digits=2)
{
if(prob > .5) prob <- 1 - prob
ans <- -quantile(returnVector, prob) * notional
signif(ans, digits=digits)
}
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
glmIndepVars <- !(names(train_pruned) %in% c("GrossChargeOffAmount"))
glm_train_indep <- train_pruned[,glmIndepVars]
glm_test_indep <- test_pruned[,glmIndepVars]
glm.fit <- glm(defaulted~., data = glm_train_indep, family = binomial)
glm.probs <- predict.glm(glm.fit, newdata = glm_train_indep, type = "response")
glm.train.pred <- prediction(glm.probs, train_pruned$defaulted)
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
glmIndepVars <- !(names(train_pruned) %in% c("GrossChargeOffAmount"))
glm_train_indep <- train_pruned[,glmIndepVars]
glm_test_indep <- test_pruned[,glmIndepVars]
glm_train_indep$is504 <- glm_train_indep$DeliveryMethod == "504"
glm_train_indep$isPCLP <- glm_train_indep$DeliveryMethod == "PCLP"
glm_train_indep$isALP <- glm_train_indep$DeliveryMethod == "ALP"
glm_train_indep$isRefi <- glm_train_indep$DeliveryMethod == "504REFI"
n_occur_temp <- data.frame(table(glm_train_indep$DeliveryMethod))
glm_train_indep$isIndiv <- glm_train_indep$BusinessType == "INDIVIDUAL"
glm_train_indep$isPartnership <- glm_train_indep$BusinessType == "PARTNERSHIP"
glm_train_indep$isCorp <- glm_train_indep$BusinessType == "CORPORATION"
#take out non-numeric columns
boot_drops <- c("DeliveryMethod","BusinessType")
glm_train_indep <- glm_train_indep[,!(names(glm_train_indep) %in% boot_drops)]
glm.fit <- glm(defaulted~., data = glm_train_indep, family = binomial)
glm.probs <- predict.glm(glm.fit, newdata = glm_train_indep, type = "response")
glm.train.pred <- prediction(glm.probs, train_pruned$defaulted)
random_sample <- glm_train_indep[sample(nrow(glm_train_indep), 500), ]
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
View(random_sample.probs)
glm.train.pred <- prediction(glm.probs, train_pruned$defaulted)
View(glm.train.pred)
View(random_sample.probs)
random_sample.bin <- bool(random_sample > min_lambda)
random_sample.bin <- (random_sample > min_lambda)
View(random_sample.bin)
random_sample.bin <- (random_sample.probs > min_lambda)
View(random_sample.bin)
random_sample.bin <- df[(random_sample.probs > min_lambda)]
random_sample.bin <- df(random_sample.probs > min_lambda)
random_sample.bin <- format.data.frame(random_sample.probs > min_lambda)
View(random_sample.bin)
loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
View(loss_amounts)
View(random_sample.bin)
random_sample.bin <- (random_sample.probs > min_lambda)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
random_sample.defaults <- subset(random_sample("TRUE"))
random_sample.defaults <- subset(random_sample.bin("TRUE"))
random_sample.defaults <- mydata[ which(random_sample.bin$value =='TRUE'), ]
random_sample.defaults <- mydata[ which(random_sample.bin =='TRUE'), ]
View(random_sample.defaults)
random_sample.defaults <- mydata[ which(random_sample.bin =='TRUE'), ]
random_sample.defaults <- glm_train_indep[ which(random_sample.bin =='TRUE'), ]
View(random_sample.defaults)
random_sample.defaults <- mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"]
View(random_sample.defaults)
sum(random_sample.defaults)
View(random_sample.defaults)
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector <- c(100,1)
View(lossVector)
for(i in 1:100) {
random_sample <- glm_train_indep[sample(nrow(glm_train_indep), 500), ]
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
random_sample.bin <- (random_sample.probs > min_lambda)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector[i,] <- total.loss
}
for(i in 1:100) {
random_sample <- glm_train_indep[sample(nrow(glm_train_indep), 500), ]
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
random_sample.bin <- (random_sample.probs > min_lambda)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector[i] <- total.loss
}
View(lossVector)
hist1 <- hist(lossVector)
VaRhistorical(lossVector)
VaRhistorical <- function(returnVector, prob=.05,
notional=1, digits=3)
{
if(prob > .5) prob <- 1 - prob
ans <- -quantile(returnVector, prob) * notional
signif(ans, digits=digits)
}
VaRhistorical(lossVector)
VaRhistorical(-lossVector)
for(i in 1:1000) {
random_sample <- glm_train_indep[sample(nrow(glm_train_indep), 500), ]
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
random_sample.bin <- (random_sample.probs > min_lambda)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector[i] <- total.loss
}
hist1 <- hist(lossVector)
VaRhistorical(-lossVector)
VaRhistorical <- function(returnVector, prob=.05,
notional=1, digits=2)
{
if(prob > .5) prob <- 1 - prob
ans <- -quantile(returnVector, prob) * notional
signif(ans, digits=digits)
}
VaRhistorical(-lossVector)
EShistorical <- function(returnVector, prob=.05,
notional=1, digits=2)
{
if(prob > .5) prob <- 1 - prob
v <- quantile(returnVector, prob)
ans <- -mean(returnVector[returnVector <= v]) *
notional
signif(ans, digits=digits)
}
EShistorical(-lossVector)
indepVars <- !(names(train_pruned) %in% c("defaulted", "GrossChargeOffAmount"))
train_indep <- train_pruned[, indepVars]
test_indep <- test_pruned[, indepVars]
set.seed(2123)
lasso.cv <- cv.glmnet(x=data.matrix(train_indep), y=train_pruned$defaulted, family = "binomial")
addl_data <- read.csv("Addl_Data_Selected.csv")
addl_data$StockMktTurnover_China <- NULL
addl_data$BAML_HY_Adj_Sprd <- NULL
addl_data$DisposableIncome <- NULL
mydata <- merge(x=mydata, y=addl_data, by.x="ApprovalFiscalYear", by.y="Year")
mixed.set <- mydata[sample(nrow(mydata)),]
train <- mixed.set[1:37346,]
test <- mixed.set[38346:53352,]
#uninteresting variables not used in our model analysis
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc","NaicsCode","InitialInterestRate")
train_pruned <- train[,!(names(train) %in% drops)]
test_pruned <- test[,!(names(test) %in% drops)]
myvars <- names(test_pruned) %in% c("defaulted")
lm.fit <- lm(GrossChargeOffAmount~., data = test_pruned[!myvars])
summary(lm.fit) # show results
myvars_new <- names(train_pruned) %in% c("defaulted","DeliveryMethod","BusinessType")
train_pruned_subset <- subset(train_pruned, select = !myvars_new)
test_pruned_subset <- subset(test_pruned, select = !myvars_new)
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_pruned, family = "binomial")
glm.probs <- predict.glm(glm.fit, newdata = test_pruned, type = "response")
indepVars <- !(names(train_pruned) %in% c("defaulted", "GrossChargeOffAmount"))
train_indep <- train_pruned[, indepVars]
test_indep <- test_pruned[, indepVars]
set.seed(2123)
lasso.cv <- cv.glmnet(x=data.matrix(train_indep), y=train_pruned$defaulted, family = "binomial")
View(train_pruned)
mydata <- read.csv("SBA_Loan_data.csv")
mydata$defaulted <- mydata$GrossChargeOffAmount > 0
mydata <- subset(mydata, LoanStatus!="EXEMPT"&LoanStatus!="CANCLD"&!is.na(BusinessType))
mydata$TermYearly <- mydata$TermInMonths%%12 == 0
n_occur <- data.frame(table(mydata$BorrName))
n_occur <- n_occur[n_occur$Freq > 1,]
mydata$IsDuplicateBorrower <- mydata$BorrName %in% n_occur[,1]
hpi_data <- read.table("HPI_PO_state.txt", header=TRUE, sep="\t")
names(hpi_data)[names(hpi_data)=="index_sa"] <- "HousingPriceIndex"
hpi.badcols <- c("Warning","index_nsa", "qtr")
hpi_data <- subset(hpi_data, qtr==4)
hpi_data <- hpi_data[,-which(names(hpi_data) %in% hpi.badcols)]
mydata <- merge(x=mydata, y=hpi_data, by.x=c("BorrState","ApprovalFiscalYear"), by.y=c("state","yr"))
unemp_data <- read.table("State_level_unemployment_rate_Monthly.txt", header=TRUE, sep="\t")
unemp_data_subset <- unemp_data[grep("-12-01", unemp_data$DATE), ]
unemp_data_subset$DATE <- gsub("-12-01", "", unemp_data_subset$DATE)
names(unemp_data_subset) <- gsub("UR","",names(unemp_data_subset))
#splice unemployment rate data into mydata table (works)
unemp_data_subset <- unemp_data_subset[,!(names(unemp_data_subset) %in% c("DATE"))]
temp_table <- data.frame(matrix(NA, nrow = 2000, ncol = 3))
i = 1
for(yr in 1:nrow(unemp_data_subset)) {
for(st in names(unemp_data_subset)) {
temp_table[i, ] = c(yr+1975,st,unemp_data_subset[yr,st])
i=i+1
}
}
names(temp_table)[names(temp_table)=="X1"] <- "YR"
names(temp_table)[names(temp_table)=="X2"] <- "ST"
names(temp_table)[names(temp_table)=="X3"] <- "UnemploymentRate"
mydata <- merge(x=mydata, y=temp_table, by.x=c("ApprovalFiscalYear","BorrState"), by.y=c("YR","ST"))
mydata$UnemploymentRate <- as.numeric(mydata$UnemploymentRate)
fedfunds_data <- read.csv("fredgraph.csv")
fedfunds_data_subset <- fedfunds_data[grep("-12-01", fedfunds_data$observation_date),]
fedfunds_data_subset$observation_date <- gsub("-12-01", "", fedfunds_data_subset$observation_date)
mydata <- merge(x=mydata, y=fedfunds_data_subset, by.x="ApprovalFiscalYear", by.y="observation_date")
#Merge with Median Household Income data from US Census Bureau (works!)
household_income_data <- read.csv("medianhhincome.csv", header=TRUE)
names(household_income_data) <- gsub("X","",names(household_income_data))
household_mat <- as.matrix(household_income_data)
temp_table <- data.frame(matrix(NA, nrow = 1250, ncol = 3))
i = 1
for(yr in 2:ncol(household_mat)) {
for(st in 1:nrow(household_mat)-1) {
temp_table[i, ] = c(2016-yr,household_mat[st,1],as.integer(gsub(",","",household_mat[st,yr])))
i=i+1
}
}
names(temp_table)[names(temp_table)=="X1"] <- "YR"
names(temp_table)[names(temp_table)=="X2"] <- "ST"
names(temp_table)[names(temp_table)=="X3"] <- "HouseholdIncome"
mydata <- merge(x=mydata, y=temp_table, by.x=c("ApprovalFiscalYear","BorrState"), by.y=c("YR","ST"))
mydata$HouseholdIncome <- as.numeric(mydata$HouseholdIncome)
sp_data <- read.csv("SP-data.csv")
mydata <- merge(x=mydata, y=sp_data, by.x="ApprovalFiscalYear", by.y="Year")
addl_data <- read.csv("Addl_Data_Selected.csv")
addl_data$StockMktTurnover_China <- NULL
addl_data$BAML_HY_Adj_Sprd <- NULL
addl_data$DisposableIncome <- NULL
mydata <- merge(x=mydata, y=addl_data, by.x="ApprovalFiscalYear", by.y="Year")
mixed.set <- mydata[sample(nrow(mydata)),]
train <- mixed.set[1:37346,]
test <- mixed.set[38346:53352,]
drops <- c("Program", "BorrName","BorrStreet","BorrCity","BorrZip","CDC_Name","CDC_Street","CDC_City","CDC_Zip","ThirdPartyLender_Name","ThirdPartyLender_City","ThirdPartyLender_State","ThirdPartyDollars","Delivery Method","ProjectCounty","ApprovalDate","ChargeOffDate","NaicsDescription","BorrState","CDC_State","ProjectState","LoanStatus","subpgmdesc","NaicsCode","InitialInterestRate")
train_pruned <- train[,!(names(train) %in% drops)]
test_pruned <- test[,!(names(test) %in% drops)]
glmIndepVars <- !(names(train_pruned) %in% c("GrossChargeOffAmount"))
glm_train_indep <- train_pruned[,glmIndepVars]
glm_test_indep <- test_pruned[,glmIndepVars]
glm_train_indep$is504 <- glm_train_indep$DeliveryMethod == "504"
glm_train_indep$isPCLP <- glm_train_indep$DeliveryMethod == "PCLP"
glm_train_indep$isALP <- glm_train_indep$DeliveryMethod == "ALP"
glm_train_indep$isRefi <- glm_train_indep$DeliveryMethod == "504REFI"
n_occur_temp <- data.frame(table(glm_train_indep$DeliveryMethod))
glm_train_indep$isIndiv <- glm_train_indep$BusinessType == "INDIVIDUAL"
glm_train_indep$isPartnership <- glm_train_indep$BusinessType == "PARTNERSHIP"
glm_train_indep$isCorp <- glm_train_indep$BusinessType == "CORPORATION"
boot_drops <- c("DeliveryMethod","BusinessType")
glm_train_indep <- glm_train_indep[,!(names(glm_train_indep) %in% boot_drops)]
glm.fit <- glm(defaulted~., data = glm_train_indep, family = binomial)
glm.probs <- predict.glm(glm.fit, newdata = glm_train_indep, type = "response")
glm.train.pred <- prediction(glm.probs, train_pruned$defaulted)
indepVars <- !(names(train_pruned) %in% c("defaulted", "GrossChargeOffAmount"))
train_indep <- train_pruned[, indepVars]
test_indep <- test_pruned[, indepVars]
set.seed(2123)
lasso.cv <- cv.glmnet(x=data.matrix(train_indep), y=train_pruned$defaulted, family = "binomial")
plot(lasso.cv)
lasso.cv$lambda.1se
lasso.cv$lambda.min
lasso.models <- lasso.cv$glmnet.fit
selected.index <- which(lasso.models$lambda == lasso.cv$lambda.1se)
colnames(train_indep)[lasso.models$beta[,selected.index] != 0]
selected.index <- which(lasso.models$lambda == lasso.cv$lambda.min)
colnames(train_indep)[lasso.models$beta[,selected.index] != 0]
selected.index <- which(lasso.models$lambda == lasso.cv$lambda.1se)
colnames(train_indep)[lasso.models$beta[,selected.index] != 0]
test.phat <- predict(lasso.cv,
newx=data.matrix(test_indep),
s="lambda.1se")
test.pred <- prediction(test.phat, test_pruned$defaulted)
test.roc <- performance(test.pred, measure = "tpr", x.measure = "fpr")
plot(test.roc,colorize=FALSE, col="black")
lines(c(0,1),c(0,1),col = "gray", lty = 4 )
View(test.phat)
View(test.pred)
View(test.phat)
type = "response")
test.phat <- predict(lasso.cv,
newx=data.matrix(test_indep),
s="lambda.1se",
type = "response")
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
for(i in 1:1000) {
random_sample <- train_indep[sample(nrow(train_indep), 500), ]
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
random_sample.bin <- (random_sample.probs > min_lambda)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector[i] <- total.loss
}
for(i in 1:1000) {
random_sample <- train_indep[sample(nrow(train_indep), 500), ]
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
random_sample.bin <- (random_sample.probs > lamba_1se)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector[i] <- total.loss
}
lambda_1se <- lasso.cv$lambda.1se
for(i in 1:1000) {
random_sample <- train_indep[sample(nrow(train_indep), 500), ]
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
random_sample.bin <- (random_sample.probs > lamba_1se)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector[i] <- total.loss
}
lambda_1se <- lasso.cv$lambda.1se
for(i in 1:1000) {
random_sample <- train_indep[sample(nrow(train_indep), 500), ]
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
random_sample.bin <- (random_sample.probs > lambda_1se)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector[i] <- total.loss
}
lossVector <- vector()
for(i in 1:1000) {
random_sample <- train_indep[sample(nrow(train_indep), 500), ]
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
random_sample.bin <- (random_sample.probs > lambda_1se)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector[i] <- total.loss
}
hist1 <- hist(lossVector)
VaRhistorical(-lossVector)
VaRhistorical <- function(returnVector, prob=.05,
notional=1, digits=2)
{
if(prob > .5) prob <- 1 - prob
ans <- -quantile(returnVector, prob) * notional
signif(ans, digits=digits)
}
EShistorical <- function(returnVector, prob=.05,
notional=1, digits=2)
{
if(prob > .5) prob <- 1 - prob
v <- quantile(returnVector, prob)
ans <- -mean(returnVector[returnVector <= v]) *
notional
signif(ans, digits=digits)
}
VaRhistorical(-lossVector)
EShistorical(-lossVector)
random_sample <- train_indep[sample(nrow(train_indep), 500), ]
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
random_sample.bin <- (random_sample.probs > lambda_1se)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
View(all_loss_amounts)
test.roc <- performance(test.pred, measure = "tpr", x.measure = "fpr")
plot(test.roc,colorize=FALSE, col="black")
lines(c(0,1),c(0,1),col = "gray", lty = 4 )
test.roc <- performance(test.pred, measure = "tpr", x.measure = "fpr")
test.phat$tpr
test.pred
test.pred$tpr
hist1 <- hist(lossVector)
plot(test.roc,colorize=FALSE, col="black")
lines(c(0,1),c(0,1),col = "gray", lty = 4 )
lambda_1se <- lasso.cv$lambda.1se
lambda_1se
avg(mydata$GrossApproval)
average(mydata$GrossApproval)
sum(mydata$GrossApproval)
sum(random_sample$GrossApproval)
sum(random_sample$GrossApproval)/500
total.loss
sum(random_sample$GrossApproval)-total.loss
length(mydata[ which(random_sample.bin == 'TRUE')])
length(mydata[ which(random_sample.bin == 'TRUE'),"GrossApproval"])
random_sample.bin
random_sample.probs
lambda_1se
for(i in 1:1000) {
random_sample <- train_indep[sample(nrow(train_indep), 500), ]
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
random_sample.bin <- (random_sample.probs < lambda_1se)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
total.loss <- sum(mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"])
lossVector[i] <- total.loss
}
hist1 <- hist(lossVector)
VaRhistorical(-lossVector)
EShistorical(-lossVector)
random_sample <- train_indep[sample(nrow(train_indep), 500), ]
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
random_sample.bin <- (random_sample.probs < lambda_1se)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
sample.defaults <- mydata[ which(random_sample.bin =='TRUE'), "GrossApproval"]
View(sample.defaults)
sample.defaults <- mydata[ which(random_sample.bin =='TRUE'),]
random_sample <- train_indep[sample(nrow(train_indep), 500), ]
random_sample.probs <- test.phat <- predict(lasso.cv,
newx=data.matrix(random_sample),
s="lambda.1se",
type = "response")
random_sample.bin <- (random_sample.probs < lambda_1se)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
sample.defaults <- mydata[ which(random_sample.bin =='TRUE'),]
total.loss <- sum(sample.defaults$GrossApproval)
total.loss
View(sample.defaults)
myvars <- names(test_pruned) %in% c("defaulted")
lm.fit <- lm(GrossChargeOffAmount~., data = test_pruned[!myvars])
summary(lm.fit) # show results
glm.fit <- glm(defaulted~.-GrossChargeOffAmount, data = train_pruned, family = "binomial")
glm.probs <- predict.glm(glm.fit, newdata = test_pruned, type = "response")
summary(glm.fit)
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
random_sample <- train_indep[sample(nrow(glm_train_indep), 500), ]
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
random_sample <- train_indep[sample(nrow(glm_train_indep), 500), ]
View(random_sample)
random_sample <- train_indep[sample(nrow(glm_train_indep), 500), ]
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
summary(glm.fit)
glm.probs <- predict.glm(glm.fit, newdata = test_pruned, type = "response")
View(glm.probs)
random_sample <- glm_train_indep[sample(nrow(glm_train_indep), 500), ]
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
glm_train_indep$is504 <- glm_train_indep$DeliveryMethod == "504"
glm_train_indep$isPCLP <- glm_train_indep$DeliveryMethod == "PCLP"
glmIndepVars <- !(names(train_pruned) %in% c("GrossChargeOffAmount"))
glm_train_indep <- train_pruned[,glmIndepVars]
glm_test_indep <- test_pruned[,glmIndepVars]
glm_train_indep$is504 <- glm_train_indep$DeliveryMethod == "504"
glm_train_indep$isPCLP <- glm_train_indep$DeliveryMethod == "PCLP"
glm_train_indep$isALP <- glm_train_indep$DeliveryMethod == "ALP"
glm_train_indep$isRefi <- glm_train_indep$DeliveryMethod == "504REFI"
n_occur_temp <- data.frame(table(glm_train_indep$DeliveryMethod))
glm_train_indep$isIndiv <- glm_train_indep$BusinessType == "INDIVIDUAL"
glm_train_indep$isPartnership <- glm_train_indep$BusinessType == "PARTNERSHIP"
glm_train_indep$isCorp <- glm_train_indep$BusinessType == "CORPORATION"
#take out non-numeric columns
boot_drops <- c("DeliveryMethod","BusinessType")
glm_train_indep <- glm_train_indep[,!(names(glm_train_indep) %in% boot_drops)]
glm.fit <- glm(defaulted~., data = glm_train_indep, family = binomial)
glm.probs <- predict.glm(glm.fit, newdata = glm_train_indep, type = "response")
glm.train.pred <- prediction(glm.probs, train_pruned$defaulted)
summary(glm.fit)
random_sample <- glm_train_indep[sample(nrow(glm_train_indep), 500), ]
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
random_sample.bin <- (random_sample.probs < lambda_1se)
View(random_sample.probs)
View(random_sample.bin)
sample.defaults <- mydata[ which(random_sample.bin =='TRUE'),]
View(sample.defaults)
total.loss <- sum(sample.defaults$GrossApproval)
total.loss
for(i in 1:1000) {
random_sample <- glm_train_indep[sample(nrow(glm_train_indep), 500), ]
random_sample.probs <- predict.glm(glm.fit, newdata = random_sample, type = "response")
random_sample.bin <- (random_sample.probs < lambda_1se)
all_loss_amounts <- train_pruned[,"GrossChargeOffAmount"]
sample.defaults <- mydata[ which(random_sample.bin =='TRUE'),]
total.loss <- sum(sample.defaults$GrossApproval)
lossVector[i] <- total.loss
}
hist1 <- hist(lossVector)
VaRhistorical(-lossVector)
EShistorical(-lossVector)
hist1 <- hist(lossVector)
